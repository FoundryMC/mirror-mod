plugins {
    id 'multiloader-loader'
    id 'net.neoforged.moddev'
}

repositories {
    maven {
        url = "https://maven.su5ed.dev/releases"
    }
}

dependencies {
    runtimeOnly "maven.modrinth:sodium:mc1.21.1-0.6.9-neoforge"
//    implementation "maven.modrinth:iris:1.8.8+1.21.1-neoforge"

    // Allows sodium compat to compile properly
    runtimeOnly "org.sinytra.forgified-fabric-api:forgified-fabric-api:0.107.0+2.0.25+1.21.1"

    jarJar(implementation("foundry.veil:veil-neoforge-${project.minecraft_version}")) {
        exclude group: "maven.modrinth"
        version {
            strictly "[${project.veil_version},)"
            prefer "${project.veil_version}"
        }
    }
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
    runs {
        configureEach {
            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
        }
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }